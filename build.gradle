plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    // Adds the Kotlin Gradle plugin
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'

    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '0.1.0'
group = 'xyz.chlamydomonos.ptgt'
//noinspection GroovyUnusedAssignment
archivesBaseName = 'ptgt'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println ("Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}")
minecraft {
    // Change to your preferred mappings
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'
    // Add your AccessTransformer
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'ptgt'

            mods {
                ptgt {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'ptgt'

            mods {
                ptgt {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run/server')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'ptgt'

            mods {
                ptgt {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            //noinspection GroovyAssignabilityCheck
            args '--mod', 'ptgt', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                ptgt {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include assets and data from data generators
sourceSets.main.resources { srcDirs 'src/generated/resources/' }

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }

    maven {
        url 'https://cursemaven.com'
    }
}

dependencies {
    // Use the latest version of Minecraft Forge
    minecraft 'net.minecraftforge:forge:1.19.2-43.3.0'

    implementation 'thedarkcolour:kotlinforforge:3.12.0'

    implementation fg.deobf("curse.maven:immersive-portals-for-forge-355440:4896844")

    runtimeOnly fg.deobf("curse.maven:rubidium-574856:4763255")
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                'Specification-Title': "ptgt",
                'Specification-Vendor': "ptgtsareus",
                'Specification-Version': "1", // We are version 1 of ourselves
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor' :"ptgtsareus",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//noinspection GroovyAssignabilityCheck
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
